"""Migrate from PDF to universal Document tables

Revision ID: 68c37be23ee5
Revises: ebefbae047fa
Create Date: 2025-08-11 01:48:39.382343

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '68c37be23ee5'
down_revision: Union[str, None] = 'ebefbae047fa'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### Custom migration with data preservation ###
    
    # Step 1: Create new documents table
    op.create_table('documents',
    sa.Column('uuid', sa.String(), nullable=False),
    sa.Column('filename', sa.String(), nullable=False),
    sa.Column('file_type', sa.String(), nullable=False),
    sa.Column('file_extension', sa.String(), nullable=False),
    sa.Column('mime_type', sa.String(), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('uploaded_at', sa.DateTime(), nullable=True),
    sa.Column('pinecone_namespace', sa.String(), nullable=True),
    sa.Column('processing_status', sa.String(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_index(op.f('ix_documents_uuid'), 'documents', ['uuid'], unique=True)
    
    # Step 2: Migrate data from pdf_documents to documents (if pdf_documents exists)
    connection = op.get_bind()
    
    # Check if pdf_documents table exists
    result = connection.execute(sa.text("""
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'pdf_documents'
        );
    """))
    
    if result.fetchone()[0]:  # Table exists
        # Migrate data from pdf_documents to documents
        connection.execute(sa.text("""
            INSERT INTO documents (uuid, filename, file_type, file_extension, mime_type, file_size, uploaded_at, pinecone_namespace, processing_status, error_message)
            SELECT 
                uuid,
                filename,
                'PDF Document' as file_type,
                '.pdf' as file_extension,
                'application/pdf' as mime_type,
                NULL as file_size,
                uploaded_at,
                pinecone_namespace,
                'completed' as processing_status,
                NULL as error_message
            FROM pdf_documents;
        """))
        
        # Step 3: Add document_uuid column to chat_history (nullable first)
        op.add_column('chat_history', sa.Column('document_uuid', sa.String(), nullable=True))
        
        # Step 4: Update chat_history to use document_uuid instead of pdf_uuid
        connection.execute(sa.text("""
            UPDATE chat_history 
            SET document_uuid = pdf_uuid;
        """))
        
        # Step 5: Make document_uuid NOT NULL
        op.alter_column('chat_history', 'document_uuid', nullable=False)
        
        # Step 6: Drop old foreign key and create new one
        op.drop_constraint('chat_history_pdf_uuid_fkey', 'chat_history', type_='foreignkey')
        op.create_foreign_key(None, 'chat_history', 'documents', ['document_uuid'], ['uuid'])
        
        # Step 7: Drop old pdf_uuid column
        op.drop_column('chat_history', 'pdf_uuid')
        
        # Step 8: Drop old pdf_documents table
        op.drop_index('ix_pdf_documents_uuid', table_name='pdf_documents')
        op.drop_table('pdf_documents')
    else:
        # If pdf_documents doesn't exist, just add the document_uuid column
        op.add_column('chat_history', sa.Column('document_uuid', sa.String(), nullable=False))
        op.create_foreign_key(None, 'chat_history', 'documents', ['document_uuid'], ['uuid'])


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('chat_history', sa.Column('pdf_uuid', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'chat_history', type_='foreignkey')
    op.create_foreign_key('chat_history_pdf_uuid_fkey', 'chat_history', 'pdf_documents', ['pdf_uuid'], ['uuid'])
    op.drop_column('chat_history', 'document_uuid')
    op.create_table('pdf_documents',
    sa.Column('uuid', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('pinecone_namespace', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('uuid', name='pdf_documents_pkey')
    )
    op.create_index('ix_pdf_documents_uuid', 'pdf_documents', ['uuid'], unique=False)
    op.drop_index(op.f('ix_documents_uuid'), table_name='documents')
    op.drop_table('documents')
    # ### end Alembic commands ###
